10 黄毛
4 胖子  30


nginx 配置文件

    组成部分
        全局
        event 定义nginx工作模式
        http 提供web功能
        server 设置虚拟主机 但必须位于http内部 可以有多个

[root@xiangyu-lin ~]# cat /usr/local/nginx/conf/nginx.conf

#设置用户和组
#user  nobody;
#设置启动的子进程数
worker_processes  1;

#错误日志文件， 以及日志级别
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#进程号保存文件
#pid        logs/nginx.pid;


events {
    #每个进程可以处理的连接数， 受系统文件的句柄限制
    worker_connections  1024;
}


http {
    #mine.types 为文件类型定义文件
    include       mime.types;
    #默认文件类型
    default_type  application/octet-stream;

    #使用log_format 可以自定义日志格式， 名称为main
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #创建访问日志 使用main的定义格式
    #access_log  logs/access.log  main;

    #是否调用sendfile() 进行数据复制，因为它是内核级别完成的 比read write更高效
    sendfile        on;
    #开启后服务器的响应头信息产生独立的数据包发送，即一个响应头信息一个包
    #tcp_nopush     on;

    #保持连接的超时时间
    #keepalive_timeout  0;
    keepalive_timeout  65;

    #是否采用压缩功能
    #gzip  on;

    #server定义虚拟主句
    server {
        #端口
        listen       80;
        #访问域名
        server_name  localhost;
        #编码格式
        #charset koi8-r;

        #虚拟主机的访问日志
        #access_log  logs/host.access.log  main;

        #对url进行匹配
        location / {
            #设置网页根路径，相对路径，相对于nginx安装目录
            root   html;
            #首页文件 从前往后找
            index  index.html index.htm;
        }

        #设置错误代码对应的错误页
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        # 访问以php结尾的url 自动转交个 127.0.0.1:80
        # 通过 proxy_pass 可以实现代理功能
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        # 拒绝所有人访问.ht页面
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    # 定义虚拟主机
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    # ssl监听端口
    #    listen       443 ssl;
    #    server_name  localhost;

    # 指定证书文件， 相对路径在nginx.conf 同目录下
    #    ssl_certificate      cert.pem;
    # 私钥文件
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
