安装httpd-2.4

	httpd依赖于apr-1.4+, apr-util-1.4+, [apr-icon]
		apr: apache portable runtime #apache 运行时环境

	CentOS 6:
		默认：apr-1.3.9, apr-util-1.3.9
				#可能被其他程序依赖 所以不升级apr
		编译安装步骤：

			1.4+版的apr和apr-util

			前提：
				安装开发环境，安装pcre-devel

			(1) apr
				# ./configure --prefix=/usr/local/apr #指定安装路径  不与原版本冲突
				# make && make install

			(2) apr-util
				# ./configure --prefix=/usr/local/apr-util --with=/usr/local/apr #针对新版apr安装
					#./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr
				# make && make install
			(3) yum install openssl-devel  #OpenSSL too old

			# groupadd -r apache
			# useradd -r -g apache apahce
			# yum -y install pcre-devel  #解决依赖关系--with-pcre
			# ./configure --prefix=/usr/local/apache --sysconf=/etc/httpd24 --enable-so --enable-ssl --enable-cgi --enable-rewrite --with-zlib --with-pcre --with-apr=/usr/local/apr --with-apr-util=/usr/local/apr-util/ --enable-modules=most --enable-mpms-shared=all --with-mpm=prefork
			# ./configure --prefix=/usr/local/apache
							--sysconf=/etc/httpd24 --enable-so
							--enable-ssl --enable-cgi --enable-rewrite
							--with-zlib --with-pcre --with-apr=/usr/local/apr
							--with-apr-util=/usr/local/apr-util/
							--enable-modules=most --enable-mpms-shared=all
							--with-mpm=prefork
			# make && make install

			启动服务：
				apachectl
				#/usr/local/apache/bin/apachectl start

				(6) CentOS 6 服务脚本
					cd /etc/rc.d/init.d/
					cp httpd httpd24
					vim http24
					chkconfig --add httpd24 #加到服务器列表中
					chkconfig --list httpd24
					chkconfig httpd24 on


					#!/bin/bash
					#
					# httpd        Startup script for the Apache HTTP Server
					#
					# chkconfig: - 85 15
					# description: The Apache HTTP Server is an efficient and extensible  \
					#	       server implementing the current HTTP standards.
					# processname: httpd
					# config: /etc/httpd/conf/httpd.conf
					# config: /etc/sysconfig/httpd
					# pidfile: /var/run/httpd/httpd.pid
					#
					### BEGIN INIT INFO
					# Provides: httpd
					# Required-Start: $local_fs $remote_fs $network $named
					# Required-Stop: $local_fs $remote_fs $network
					# Should-Start: distcache
					# Short-Description: start and stop Apache HTTP Server
					# Description: The Apache HTTP Server is an extensible server
					#  implementing the current HTTP standards.
					### END INIT INFO

					# Source function library.
					. /etc/rc.d/init.d/functions

					if [ -f /etc/sysconfig/httpd ]; then
							. /etc/sysconfig/httpd
					fi

					# Start httpd in the C locale by default.
					HTTPD_LANG=${HTTPD_LANG-"C"}

					# This will prevent initlog from swallowing up a pass-phrase prompt if
					# mod_ssl needs a pass-phrase from the user.
					INITLOG_ARGS=""

					# Set HTTPD=/usr/sbin/httpd.worker in /etc/sysconfig/httpd to use a server
					# with the thread-based "worker" MPM; BE WARNED that some modules may not
					# work correctly with a thread-based MPM; notably PHP will refuse to start.

					# Path to the apachectl script, server binary, and short-form for messages.
					apachectl=/usr/local/apache/bin/apachectl #--------------------
					httpd=/usr/local/apache/bin/httpd		#----------------------
					prog=httpd
					pidfile=${PIDFILE-/var/run/httpd/httpd24.pid} #-----------------
					lockfile=${LOCKFILE-/var/lock/subsys/httpd24} #-----------------
					RETVAL=0
					STOP_TIMEOUT=${STOP_TIMEOUT-10}

					# The semantics of these two functions differ from the way apachectl does
					# things -- attempting to start while running is a failure, and shutdown
					# when not running is also a failure.  So we just do it the way init scripts
					# are expected to behave here.
					start() {
							echo -n $"Starting $prog: "
							LANG=$HTTPD_LANG daemon --pidfile=${pidfile} $httpd $OPTIONS
							RETVAL=$?
							echo
							[ $RETVAL = 0 ] && touch ${lockfile}
							return $RETVAL
					}

					# When stopping httpd, a delay (of default 10 second) is required
					# before SIGKILLing the httpd parent; this gives enough time for the
					# httpd parent to SIGKILL any errant children.
					stop() {
						echo -n $"Stopping $prog: "
						killproc -p ${pidfile} -d ${STOP_TIMEOUT} $httpd
						RETVAL=$?
						echo
						[ $RETVAL = 0 ] && rm -f ${lockfile} ${pidfile}
					}
					reload() {
						echo -n $"Reloading $prog: "
						if ! LANG=$HTTPD_LANG $httpd $OPTIONS -t >&/dev/null; then
							RETVAL=6
							echo $"not reloading due to configuration syntax error"
							failure $"not reloading $httpd due to configuration syntax error"
						else
							# Force LSB behaviour from killproc
							LSB=1 killproc -p ${pidfile} $httpd -HUP
							RETVAL=$?
							if [ $RETVAL -eq 7 ]; then
								failure $"httpd shutdown"
							fi
						fi
						echo
					}

					# See how we were called.
					case "$1" in
					  start)
						start
						;;
					  stop)
						stop
						;;
					  status)
							status -p ${pidfile} $httpd
						RETVAL=$?
						;;
					  restart)
						stop
						start
						;;
					  condrestart|try-restart)
						if status -p ${pidfile} $httpd >&/dev/null; then
							stop
							start
						fi
						;;
					  force-reload|reload)
							reload
						;;
					  graceful|help|configtest|fullstatus)
						$apachectl $@
						RETVAL=$?
						;;
					  *)
						echo $"Usage: $prog {start|stop|restart|condrestart|try-restart|force-reload|reload|status|fullstatus|graceful|help|configtest}"
						RETVAL=2
					esac

					exit $RETVAL
