openssl-私有CA-PKI-OpenSSL简介-网络通信安全基础

openssl命令
	  程序版本号：openssl version

		对称加密：enc命令
				加密：~]# openssl enc -e -des3 -a -salt -in fstab -out fstab.ciphertext # -e 加密 -a 二进制
				解密：~]# openssl enc -d -des3 -a -salt -in fstab.ciphertext -out fstab # -d 解密
					-des3 #算法可以换成别的 Cipher commands #都是算法

		单向加密：dgst命令
        openssl dgst -md5 [-out outfile] /PATH/TO/SOMEFILE

				工具：md5sum, sha1sum, sha224sum, sha256sum,..., openssl dgst
        #mkd5sum fstab
        =>#openssl dgst -md5  fstab

		生成用户密码：passwd命令
				openssl passwd -1 -salt SALT

		生成随机数：rand命令
			openssl rand -base64|-hex NUM
				NUM: 表示字节数；-hex时，每个字符4位，出现的字符数为NUM*2;

		公钥加密：
			生成密钥对儿：
				openssl genrsa -out /PATH/TO/PRIVATEKEY.FILE NUM_BITS
				# (umask 077; openssl genrsa -out key.pri 2048)
            #生成并改权限 #放在括号里是在子shell执行命令 不改变当前shell umask

				提取出公钥：
				# openssl rsa -in /PATH/FROM/PRIVATEKEY.FILE -pubout
          #-pubout(输出公钥信息)
          #-out outfile #保存到文件

		随机数生成器：
				/dev/random：仅从熵池返回随机数；随机数用尽，阻塞；
				/dev/urandom：从熵池返回随机数；随机数用尽，会利用软件生成伪随机数；非阻塞；

创建私有CA：
  	openssl的配置文件：/etc/pki/tls/openssl.cnf

  	(1) 创建所需要的文件
  		# touch index.txt
  		# echo 01 > serial
  	(2) CA自签证书
  		# (umask 077; openssl genrsa -out /etc/pki/CA/private/cakey.pem 2048)  #生成私钥文件
  		# openssl req -new -x509 -key /etc/pki/CA/private/cakey.pem -days 7300 -out /etc/pki/CA/cacert.pem
  			-new: 生成新证书签署请求；
  			-x509: 专用于CA生成自签证书；
  			-key: 生成请求时用到的私钥文件；
  			-days n：证书的有效期限；
  			-out /PATH/TO/SOMECERTFILE: 证书的保存路径；
  	(3) 发证 #由于私有ca 信息要和ca信息一致 同一个部门
  		(a) 用到证书的主机生成证书请求；
  			# (umask 077; openssl genrsa -out /etc/httpd/ssl/httpd.key 2048) #生成私钥
  			# openssl req -new -key /etc/httpd/ssl/httpd.key -days 365 -out /etc/httpd/ssl/httpd.csr  #生成请求
  		(b) 把请求文件传输给CA；
  		(c) CA签署证书，并将证书发还给请求者；#不加密
  			# openssl ca -in /tmp/httpd.csr -out /etc/pki/CA/certs/httpd.crt -days 365  #crt 证书后缀

  			查看证书中的信息：
  				openssl x509 -in /PATH/FROM/CERT_FILE -noout -text|-subject|-serial
  	(4) 吊销证书
  		(a) 客户端获取要吊销的证书的serial
  			# openssl x509 -in /PATH/FROM/CERT_FILE -noout -serial -subject
  		(b) CA
  			先根据客户提交的serial与subject信息，对比检验是否与index.txt文件中的信息一致；
  			吊销证书：
  				# openssl ca -revoke /etc/pki/CA/newcerts/SERIAL.pem
  		(c) 生成吊销证书的编号(第一次吊销一个证书) #后面会自增
  			# echo 01 > /etc/pki/CA/crlnumber
  		(d) 更新证书吊销列表
  			# openssl ca -gencrl -out thisca.crl #gencrl 生成吊销列表 thisca存放吊销列表
  			查看crl文件：
  				# openssl crl -in /PATH/FROM/CRL_FILE.crl -noout -text

其他：
    PKI: Public Key Infrastructure #公钥基础设施
        PKI
        		签证机构：CA
        		注册机构：RA
        		证书吊销列表：CRL
        		证书存取库

    		X.509：定义了证书的结构以及认证协议标准
    			版本号
    			序列号
    			签名算法ID
    			发行者名称
    			有效期限
    			主体名称
    			主体公钥
    			发行者惟一标识
    			主体的惟一标识
    			扩展
    			发行者签名

      	SSL: Secure Socket Layer #安全的套接字层
      	TLS: Transport Layer Security #传输层安全
        		1995：SSL 2.0, Netscape #网景
        		1996: SSL 3.0
        		1999: TLS 1.0 # 相当于ssl 3.0的升级版
        		2006: TLS 1.1 RFC 4346
        		2008：TLS 1.2
        		2015: TLS 1.3

    		分层设计：
      			1、最低层：基础算法原语的实现，aes, rsa, md5
      			2、向上一层：各种算法的实现
      			3、再向上一层：组合算法实现的半成品
      			4、用各种组件拼装而成的种种成品密码学协议/软件：
      				tls, ssh,

        建立私有CA:
        		OpenCA  #过于专业
        		openssl

            证书申请及签署步骤：
            		1、生成申请请求；
            		2、RA核验；
            		3、CA签署；
            		4、获取证书；

    OpenSSL：开源项目简介
    		三个组件：
      			openssl: 多用途的命令行工具；
      			libcrypto: 公共加密库；
      			libssl: 库，实现了ssl及tls；

    		openssl命令：
      			openssl version：程序版本号

      			标准命令、消息摘要命令、加密命令
            Standard commands;Message Digest commands;Cipher commands

      			标准命令：
      				enc, ca, req, ...

      			对称加密：
      				工具：openssl enc, gpg
      				算法：3des, aes, blowfish, twofish

      				enc命令：
      					加密：~]# openssl enc -e(加密) -des3(算法) -a(二进制) -salt -in fstab -out fstab.ciphertext
      					解密：~]# openssl enc -d(解密) -des3 -a -salt -in fstab.ciphertext -out fstab
      						-des3 #算法可以换成别的
      						openssl ?
                      Cipher commands  #都是算法

      			单向加密：
      				工具：md5sum, sha1sum, sha224sum, sha256sum,..., openssl dgst

              #mkd5sum fstab
              =>#openssl dgst -md5 [-out outfile] fstab

      				dgst命令：
      					openssl dgst -md5 /PATH/TO/SOMEFILE


      				MAC: Message Authentication Code，单向加密的一种延伸应用，用于实现在网络通信中保证所传输的数据的完整性； #消息认证码

      					机制：
      						CBC-MAC
      						HMAC：使用md5或sha1算法

      			生成用户密码：
      				passwd命令

      					openssl passwd -1 -salt SALT

      			生成随机数：
      				openssl rand -base64|-hex NUM
      					NUM: 表示字节数；-hex时，每个字符4位，出现的字符数为NUM*2;

      			公钥加密：
      				加密：
      					算法：RSA, ELGamal
      					工具：gpg, openssl rsautl
      				数字签名：
      					算法：RSA, DSA, ELGamal

      				密钥交换：
      					算法：dh

      				DSA: Digital Signature Algorithm #数字签名算法
      				DSS：Digital Signature Standard #数字签名标准
      				RSA：#公司名 #三个作者名首字母

      				生成密钥对儿：
      					openssl genrsa -out /PATH/TO/PRIVATEKEY.FILE NUM_BITS

      					# (umask 077; openssl genrsa -out key.pri 2048)
                    #生成并该权限
                    #放在括号里是在子shell执行命令 不改变当前shell umask

      					提取出公钥：
      					# openssl rsa -in /PATH/FROM/PRIVATEKEY.FILE -pubout
                  #-pubout(输出公钥信息)
                  #-out outfile #保存到文件

      				随机数生成器：
      					/dev/random：仅从熵池返回随机数；随机数用尽，阻塞；
      					/dev/urandom：从熵池返回随机数；随机数用尽，会利用软件生成伪随机数；非阻塞；

    网络通信安全基础
    	NIST: #美国国家安全署
    		保密性：
    			数据保密性
    			隐私性
    		完整性：
    			数据完整性
    			系统完整性
    		可用性

    	安全攻击：
    		被动攻击：窃听
    		主动攻击：伪装、重放、消息篡改、拒绝服务

    	安全机制：
    		加密、数字签名、访问控制、数据完整性、认证交换、流量填充、路由控制、公证

    	安全服务：
    		认证
    		访问控制
    		数据保密性
    			连接保密性
    			无连接保密性
    			选择域保密性
    			流量保密性
    		数据完整性
    		不可否认性

    	密码算法和协议：
    		对称加密
    		公钥加密
    		单向加密
    		认证协议

    	Linux系统：OpenSSL, gpg(pgp) #gpg是pgp的实现 gpg是软件，pgp是协议

      加密算法和协议：  #常见   互联网上常用3DES AES
    		对称加密：加密和解密使用同一个密钥；
    			DES：Data Encryption Standard #数据加密标准 2003年左右被攻破 容易暴力破解 不再用
    			3DES： #3重DES
    			AES：Advanced (128bits, 192bits, 258, 384, 512bits) #高级加密标准
    			Blowfish
    			Twofish
    			IDEA #商业
    			RC6
    			CAST5

    			特性：
    				1、加密、解密使用同一个密钥；
    				2、将原始数据分割成固定大小的块，逐个进行加密；

    			缺陷：
    				1、密钥过多；
    				2、密钥分发；

    		公钥加密：密钥是成对儿出现
    			公钥：公开给所有人；pubkey
    			私钥：自己留存，必须保证其私密性；secret key
    			特点：用公钥加密的数据，只能使用与之配对儿的私钥解密；反之亦然；

    			数字签名：主要在于让接收方确认发送方身份；
    			密钥交换：发送方用对方的公钥加密一个对称密钥，并发送给对方；
    			数据加密：

    			算法: RSA,DSA,ELGamal #商业

    		单向加密：只能加密，不能解密；提取数据指纹；
    			特性：
              定长输出: #无论数据多大，使用同一算法输出长度相同
              雪崩效应: #原始数据的微小改变
    			算法：#多种不同的定长输出机制
    				md5: 128bits 定长输出
    				sha1: 160bits
    				sha224
    				sha256
    				sha384
    				sha512

    			功能：
    				完整性；

    		密钥交换：IKE #Internet Key exchange
    			公钥加密：
    			DH (Deffie-Hellman) #DH 算法
    				A: p, g #选择一个素数和生成器
    				B: p, g

    				A: x #生成隐私数据x
    					--> p^x%g    #结果发给b

    					p^y%g^x = p^xy%g
    				B: y
    					--> p^y%g    #结果发个a

    					p^x%g^y = p^xy%g

        ## 普通的加密传输方式
          A单向加密提取特征码
          私钥加密特征码附加到文件后面
          对称加密加密特征码和文件
          用B的公钥加密对称加密的密钥
          发给B

          B用私钥解密对称加密的密钥
          对称加密密钥解密 特征码和原始数据
          用A的公钥解密特征码（认证完整性和身份）
          比较特征码一致
